# Use this pipeline to go from a genbank file of mitogenomes to trees, and then optionally add barcodes or new mitogenomes
# to these trees. If you've received a tree and supermatrix, you should do the SET UP section, then skip to the ADDING 
# SEQUENCES section.
# If you need to make multiple trees, e.g. for different taxa, you'd run this pipeline separately on each genbank/fasta file

############
## SET UP ##
############

# Create a new directory and place your mitogenomes and/or fasta file into it

# You need to ensure you have various scripts, all of which are available in github repositiories. 
# You can acquire these scripts one of two ways. You can either clone the entire git repository to somewhere useful, in which case
# you will need to modify the command paths to point to these scripts. Or you can download each script to your current directory.

# To clone a repository, run the following line, replacing the author and repo parts with the relevant values
git clone https://github.com/author/repo.git 
# e.g.
git clone https://github.com/tjcreedy/biotools.git

# To download a single file, run the following line, replacing the author, repo, branch and name parts with the relevant values
wget https://raw.githubusercontent.com/author/repo/branch/name
# e.g.
wget https://raw.githubusercontent.com/nylander/catfasta2phyml/master/catfasta2phyml.pl

# tjcreedy/biotools:
# extract_genes.py
# translate.py
# backtranslate.py

# nylander/catfasta2phyml
# catfasta2phyml.pl 

# tjcreedy/phylostuff
# partitioner.py
# phylabel.R
# taxonomicindices.R

# If you get errors running any of these scripts, you may need to make them executable. You can do this by running
chmod u+x script
# e.g.
chmod u+x extract_genes.pl
# then you can run the script like this:
./extract_genes.pl

# Alternatively, you can specify the interpreter before the script name, e.g.
perl extract_genes.pl
python3 translate.py

##########################
## BUILDING A TREE FROM ##
##   NEW MITOGENOMES    ##
##########################

#                   #
# ALIGNMENT OF PCGs #
#                   #

# This pipeline is for protein coding genes only - for a pipeline for RNA genes, see the next section

# NOTE ABOUT NOTES: the below code uses a lot of loops to work through the PCGs, code for running on individual genes 
# is provided for reference in a NOTE below the loop but this isn't needed if you want to just run on all genes

# GENE EXTRACTION

mkdir 1_nt_raw
extract_genes.py -g yourmitogenomefile.gb -o 1_nt_raw/ -k --genetypes CDS

# TRANSLATION

mkdir 2_aa_raw

# Translate all the individual gene files in 1_nt_raw in a loop with one command, putting the outputs into 2_aa_raw:
# (Note that you can copy and paste all four lines directly into the terminal in one go)
for file in 1_nt_raw/*
do
   translate.py 5 < $file > 2_aa_raw/${file#*/}
done

# NOTE: if you wanted to run this on a single file, e.g. ATP6, you'd do
# translate.py 5 < 1_nt_raw/ATP6.fa > 2_aa_raw/ATP6.fa
# Swapping ATP6 for the name of each of the genes you have

# ALIGNMENT

mkdir 3_aa_aln

# Option 1: against a profile

## Align all the individual gene files in 2_aa_raw in a loop with one command, putting the outputs into 3_aa_aln:
# For a profile alignment (where you want only your sequences, you're just using the profile to help align)
for file in 2_aa_raw/*
do
   mafft --add $file --6merpair --anysymbol --thread 10 /path/to/aa/profiles/${file#*/} > 3_aa_aln/${file#*/}
done

# NOTE: if you wanted to run this on a single file, e.g. ATP6, you'd do
# mafft --addfragments 2_aa_raw/ATP6.fa --6merpair --anysymbol --thread 20 /path/to/aa/profiles/ATP6.fa > 3_aa_aln/ATP6.fa
# Swapping ATP6 for the name of each of the genes you have

# Remove profile

cd 3_aa_aln

# Remove the profile from all of the individual gene files in 3_aa_aln in a loop with one command
for file in *
do 
   mv $file ${file}_bak
   perl -pe '$. > 1 and /^>/ ? print "\n" : chomp' ${file}_bak | grep -A 1 -P '^>(?!PROFILE::).*' > $file
   rm ${file}_bak
done

# NOTE: if you wanted to run this on a single file, e.g. ATP6, you'd do
# mv ATP6.fa ATP6.fa_bak
# perl -pe '$. > 1 and /^>/ ? print "\n" : chomp' ATP6.fa_bak | grep -A 1 -P '^>(?!PROFILE::).*' > ATP6.fa
# rm ATP6.fa_bak
# Swapping ATP6 for the name of each of the genes you have

cd ../

# Option 2: de novo 

for file in 2_aa_raw/*
do
   mafft --globalpair --maxiterate 1000 --anysymbol --thread 10 $file > 3_aa_aln/${file#*/}
done

# BACKTRANSLATION

mkdir 4_nt_aln

## Backtranslate all the individual gene files in 3_aa_aln in a loop with one command, putting the outputs into 3_nt_aln:
for file in 3_aa_aln/*
do
   backtranslate.py -i $file 1_nt_raw/${file#*/} 5 > 4_nt_aln/${file#*/}
done

# NOTE: if you wanted to run this on a single file, e.g. ATP6, you'd do
# backtranslate.py -i 3_aa_aln/ATP6.fa 1_nt_raw/ATP6.fa 5 > 4_nt_aln/ATP6.fa
# Swapping ATP6 for the name of each of the genes you have

#                       #
# ALIGNMENT OF NON-PCGs #
#                       #

# This is a modification of the above pipeline to add in non-PCGs

# EXTRACTION

mkdir 1r_nt_raw/
extract_genes.py -g yourmitogenomefile.gb -o 1r_nt_raw/ -k --genetypes rRNA tRNA
# You could put only rRNA or only tRNA if you wanted

# ALIGNMENT

mkdir 4r_nt_aln/
for file in 1r_nt_raw/*
do
   mafft --globalpair --maxiterate 1000 --thread 10 $file > 4r_nt_aln/${file#*/}
done


#                     #
# BULDING SUPERMATRIX #
#                     #

# Nucleotide supermatrix

catfasta2phyml.pl -c -fasta 4_nt_aln/* > 5_nt_supermatrix.fasta 2> 5_nt_partitions.txt
   # Or with non-PCGs as well
catfasta2phyml.pl -c -fasta 4_nt_aln/* 4r_nt_aln/* > 5_nt_supermatrix.fasta 2> 5_nt_partitions.txt

# Amino acid supermatrix

catfasta2phyml.pl -c -fasta 3_aa_aln/* > 5_aa_supermatrix.fasta 2> 5_aa_partitions.txt

# Combined AA supermatrix for PCGs + NT supermatrix for non-PCGs

catfasta2phyml.pl -c -fasta 3_aa_aln/* 4r_nt_aln/* > 5_aant_supermatrix.fasta 2> 5_aant_partitions.txt
# Check for no errors
cat *partitions.txt

# Generate maximal partition tables for NT data
# NB if you get an error about an unrecognised argument, redownload partitioner.py

# Partition by genes
partitioner.py -a DNA < 5_nt_partitions.txt > 5_nt_gene_partitions.txt
# Partition by genes and all three codon positions
partitioner.py -a DNA -c < 5_nt_partitions.txt > 5_nt_gene+codon123_partitions.txt
# Partition by genes and first two codon positions
partitioner.py -a DNA -c -u 1 2 < 5_nt_partitions.txt > 5_nt_gene+codon12_partitions.txt

# Generate maximal partition tables for AA data
partitioner.py -a MTART < 5_aa_partitions.txt > 5_aa_gene_partitions.txt 

# Note partitioner.py does not work with supermatrices of combined data. I suggest you build the supermatrices separately,
# run partitioner on them separately, then use catfasta2phyml to concatenate the two supermatrices and manually combine
# and edit the partition tables. Sorry.

#                             #
# PHYLOGENETIC RECONSTRUCTION # 
#                             #

# Here are some basic commands for IQTREE to build three trees: one for each of your nucleotide partitons, and one based on 
# the amino acid translation
# YOU SHOULD NOT JUST RUN THESE COMMANDS. Read the IQTREE manual to understand what they're doing 
# http://www.iqtree.org/doc/iqtree-doc.pdf

# All of these commands could be used with combined supermatrices too.

# First, you need to run partition finder and model finder to find the optimal set of partitions and the appropriate models 
# for each

iqtree -s 5_nt_supermatrix.fasta -m MF+MERGE -T AUTO --threads-max 10 --prefix 6_nt_gene+codon123 -Q 5_nt_gene+codon123_partitions.txt
iqtree -s 5_nt_supermatrix.fasta -m MF+MERGE -T AUTO --threads-max 10 --prefix 6_nt_gene+codon12 -Q 5_nt_gene+codon12_partitions.txt

iqtree -s 5_aa_supermatrix.fasta -msub mitochondrial -m MF+MERGE -T AUTO --threads-max 10 --prefix 6_aa_gene -Q 5_aa_gene_partitions.txt

# Once these complete you can then use the output partition and model file in tree building runs

iqtree -B 1000 -alrt 1000 -abayes -lbp 1000 -bnni -s 5_nt_supermatrix.fasta -T AUTO --threads-max 10 --prefix 7_nt_gene+codon123 -Q 6_nt_gene+codon123.best_scheme.nex
iqtree -B 1000 -alrt 1000 -abayes -lbp 1000 -bnni -s 5_nt_supermatrix.fasta -T AUTO --threads-max 10 --prefix 7_nt_gene+codon12 -Q 6_nt_gene+codon12.best_scheme.nex

iqtree -B 1000 -alrt 1000 -abayes -lbp 1000 -bnni -s 5_aa_supermatrix.fasta -T AUTO --threads-max 10 --prefix 7_aa_gene -Q 6_aa_gene.best_scheme.nex

# If you have a constraint tree you can run the above commands but with -g constraint.tre added 
# (you'll want to modify the value to --prefix so that it doesn't overwrite the unconstrained version!)

# If you've done constrained and unconstrained versions of the same data, you might want to compare with AU tests, 
# here's an example
cat 7_aa_gene.treefile 7_aa_gene_constrained.treefile > 7_aa_gene_uc+c_treefiles
iqtree -s 5_aa_supermatrix.fasta -Q 6_aa_gene.best_scheme.nex -z 7_aa_gene_uc+c_treefiles -n 0 -zb 10000 -zw -au --prefix 7_aa_gene_treetests

# You may want to assess the taxonomic Consistency or Retention indices of your trees. 
# You can use the following command, obviously change for each tree and you may want to switch the taxonomic level you use
# -o is not required - see the help to check different output options
taxonomicindices.R -p tree.tre -t metadata.csv -l family -o tree_tax_indices.csv
### WARNING: taxonomicindices.R currently isn't working as expected!! ###


# Renaming trees
# This is just one example, there's lots of things you can do with this script
phylabel.R -p tree.tre -o tree_RN.tre -r --taxonomy metadata.csv --taxlevels order,family,subfamily,genus

######################
## ADDING SEQUENCES ##
######################

#                       #
# PREPARING SUPERMATRIX #
#                       #

# The theory here is pretty much as above, so we'll breeze through

# GENBANK FILES

# This step is for preparing data that comes in a genbank-format file, this might be whole mitogenomes or just
# sequences for a single locus - the commands are the same. Skip this step if you have data in fasta file(s)

mkdir 81_gbnt_raw
extract_genes.py -g yourgenbankfile.gb -o 81_gbnt_raw/ -k --genetypes CDS

# Here you may wish to check 8_gbnt_raw/ and delete any loci you're not interested in

# FASTA FILE(S)

# This step is for preparing data that comes in a fasta file. If you don't have this, skip this step
# WARNING: before proceeding you should make sure each file contains only sequences of the same locus
# and that these sequences are all in the forward reading direction

mkdir 81_fant_raw

# For each locus you have, run the following line
mv yourlocusfile.fasta 8_fant_raw/gene.fasta
# e.g.
mv myCOIfile.fasta 8_fant_raw/COX1.fasta

# You MUST use the exact file names that extract_genes.py outputs, e.g.:
# ATP6.fasta, COX1.fasta, CYTB.fasta, ND1.fasta, ND4L.fasta etc
# DOUBLE CHECK THIS NOW because the next step won't catch any errors!

# FINAL PREP

# If you have both fasta and genbank files, run this

mkdir 81_adnt_raw
for file in 1_nt_raw/*
do
   cat 81_gbnt_raw/${file#*/} 81_fant_raw/${file#*/} > 81_adnt_raw/${file#*/} 2>/dev/null
done

# Clean up empty files
find 81_adnt_raw/ -type f -empty -delete

# Otherwise if you have genbank files only
mv 81_gbnt_raw 81_adnt_raw

# Otherwise if you have fasta files only
mv 81_fant_raw 81_adnt_raw

# TRANSLATION

mkdir 82_adaa_raw
for file in 81_adnt_raw
do
   findframe.py -t 5 -u -r /path/to/aa/profiles/${file#*/} -s < $file | translate.py 5 > 82_adaa_raw/${file#*/}
done

# Note that the translated files will have a frame tag added to the header of each sequence

# ALIGNMENT

mkdir 83_adaa_aln

for file in 3_aa_aln/*
do
   name=${file#*/}
   if [ -f "82_adaa_raw/$name" ]
   then
      mafft --addfragments 82_adaa_raw/$name --6merpair --anysymbol --thread 10 $file > 83_adaa_aln/$name
   else
      cp $file 83_adaa_aln/$name
   fi
done

# BACKTRANSLATION

# First compile all raw nt data
mkdir 81_alladnt_raw
for file in 1_nt_raw/*
do
   cat $file 81_adnt_raw/${file#*/} > 81_alladnt_raw/${file#*/} 2> /dev/null
done

# Now do the backtranslation
mkdir 84_adnt_aln
for file in 83_adaa_aln/*
do
   backtranslate.py -s -i $file 81_nt_raw/${file#*/} 5 > 84_adaa_aln/${file#*/}
done

# Now that we've backtranslated, we need to remove the frame tag from the headers of the aligned amino acid 
# files. Make sure the aligned nucleotides look right first - if you need to redo this step after running 
# the following lines, you'll need to redo the alignment step first

for file in 83_adaa_aln/*
do
   sed -i -E "s/;frame=[0-9]*(;$)?//" $file
done

# NOTE: from now on the commands will just refer to NT files, but everything can be run with AA files instead 
# or as well, just as in the base pipeline above

# REDUCING ALIGNMENTS

# You may strip out unneeded columns from the alignments to save tree building time.
# Note that this might not technically be appropriate because adding more sequences may change the character variation 
# in the existing taxa. But it's probably fine if you just want to run quickly and don't intend to compare constrained vs unconstrained.

mkdir 9_adnt_aln_reduced

# Create a list of the sequences that must not be reduced (i.e. your barcodes)
grep -oP "(?<=^>).*$" 8_adnt_raw/*.fa | sort | uniq > preserved.txt

# Run the script
reducealign.py -a 9_adnt_aln/* -p preserved.txt -r -o 9_adnt_aln_reduced/

# BULDING SUPERMATRIX 

# Nucleotide supermatrix

catfasta2phyml.pl -c -fasta 9_adnt_aln/* > 10_adnt_supermatrix.fasta 2> 10_adnt_partitions.txt

# Check for no errors
cat *ad*_partitions.txt

# Convert the partition scheme to match that of your selected mitochondrial tree (make sure you change selectedname to match the 
# one of your partition scheme files, i.e. gene+codon123 or gene+codon12
partitioner.py -p 6_nt_selectedname.best_scheme.nex < 10_adnt_partitions.txt > 10_adnt_selectedname_partitionscheme.nex

# Note - the above functionality in partitioner.py is new - if you get errors, you may need to redownload the script, and if you
# still get errors, let me know!

#                             #
# PHYLOGENETIC RECONSTRUCTION # 
#                             #

# Only one tree needs running, remembering to change selectedname as above and selectedtree as well. Note that you don't necessarily 
need to use the same tree for constraint (-g) as you used to specify the partition and model scheme, i.e. you can use the AA tree here
iqtree -B 1000 -alrt 1000 -abayes -lbp 1000 -bnni -g selectedtree.treefile -s 10_adnt_supermatrix.fasta -T AUTO --threads-max 10 --prefix 11_nt_selectedname -Q 10_adnt_selectedname_partitionscheme.nex

# Renaming trees
# This is just one example, there's lots of things you can do with this script
phylabel.R -p tree.tre -o tree_RN.tre -r --taxonomy metadata.csv --taxlevels order,family,subfamily,genus

# If you have data for tips in different files, you'd need to run phylabel multiple times on the different files
